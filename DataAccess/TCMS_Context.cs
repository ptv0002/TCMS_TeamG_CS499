using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Models;
using System;
using System.Collections.Generic;
using System.Text;

namespace DataAccess
{
    public class TCMS_Context : IdentityDbContext<Employee>
    {
        public TCMS_Context(DbContextOptions<TCMS_Context> options) : base(options)
        {
        }
        
        public virtual DbSet<AssignmentDetail> AssignmentDetails { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<MaintenanceDetail> MaintenanceDetails { get; set; }
        public virtual DbSet<MaintenanceInfo> MaintenanceInfos { get; set; }
        public virtual DbSet<OrderInfo> OrderInfos { get; set; }
        public virtual DbSet<ShippingAssignment> ShippingAssignments { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Generate AspNet Identity entities
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                var tableName = entityType.GetTableName();
                if (tableName.StartsWith("AspNet"))
                {
                    entityType.SetTableName(tableName.Substring(6));
                }
            }

            // Autogenerated code from EF Core DB-first testDB, used it to regenerate TCMS_DB Code-first
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AssignmentDetail>(entity =>
            {
                entity.ToTable("AssignmentDetail");

                entity.HasIndex(e => e.OrderInfoId, "IX_AssignmentDetail_OrderInfoID");

                entity.HasIndex(e => e.ShippingAssignmentId, "IX_AssignmentDetail_ShippingAssignmentID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArrivalTime).HasColumnType("datetime");

                entity.Property(e => e.OrderInfoId).HasColumnName("OrderInfoID");

                entity.Property(e => e.ShippingAssignmentId).HasColumnName("ShippingAssignmentID");

                entity.HasOne(d => d.OrderInfo)
                    .WithMany(p => p.AssignmentDetails)
                    .HasForeignKey(d => d.OrderInfoId);

                entity.HasOne(d => d.ShippingAssignment)
                    .WithMany(p => p.AssignmentDetails)
                    .HasForeignKey(d => d.ShippingAssignmentId);
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<MaintenanceDetail>(entity =>
            {
                entity.ToTable("MaintenanceDetail");

                entity.HasIndex(e => e.MaintenanceInfoId, "IX_MaintenanceDetail_MaintenanceInfoID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MaintenanceInfoId).HasColumnName("MaintenanceInfoID");

                entity.HasOne(d => d.MaintenanceInfo)
                    .WithMany(p => p.MaintenanceDetails)
                    .HasForeignKey(d => d.MaintenanceInfoId);
            });

            modelBuilder.Entity<MaintenanceInfo>(entity =>
            {
                entity.ToTable("MaintenanceInfo");

                entity.HasIndex(e => e.EmployeeId, "IX_MaintenanceInfo_EmployeeID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Datetime).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.VehicleId)
                    .HasMaxLength(50)
                    .HasColumnName("VehicleID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.MaintenanceInfos)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_MaintenanceInfo_Employee");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.MaintenanceInfos)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_MaintenanceInfo_Vehicle");
            });

            modelBuilder.Entity<OrderInfo>(entity =>
            {
                entity.ToTable("OrderInfo");

                entity.HasIndex(e => e.DestinationId, "IX_OrderInfo_DestinationID");

                entity.HasIndex(e => e.SourceId, "IX_OrderInfo_SourceID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DestinationId).HasColumnName("DestinationID");

                entity.Property(e => e.EstimateArrivalTime).HasColumnType("datetime");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.HasOne(d => d.Destination)
                    .WithMany(p => p.OrderInfoDestinations)
                    .HasForeignKey(d => d.DestinationId);

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.OrderInfoSources)
                    .HasForeignKey(d => d.SourceId);
            });


            modelBuilder.Entity<ShippingAssignment>(entity =>
            {
                entity.ToTable("ShippingAssignment");

                entity.HasIndex(e => e.EmployeeId, "IX_ShippingAssignment_EmployeeID");

                entity.HasIndex(e => e.VehicleId, "IX_ShippingAssignment_VehicleID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepartureTime).HasColumnType("datetime");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.VehicleId)
                    .HasMaxLength(50)
                    .HasColumnName("VehicleID");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.ShippingAssignments)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_ShippingAssignment_Employee");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ShippingAssignments)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_ShippingAssignment_Vehicle");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserName).HasMaxLength(256);
            });
           
            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.ToTable("Vehicle");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.LastMaintenanceDate).HasColumnType("datetime");
            });

            base.OnModelCreating(modelBuilder);
        }
    }
}
